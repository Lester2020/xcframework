// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YZSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import CommonCrypto
import Foundation
import HandyJSON
import Swift
@_exported import YZSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers public class TestTools : ObjectiveC.NSObject {
  public static let shared: YZSDK.TestTools
  public func test()
  @objc override dynamic public init()
  @objc deinit
}
public protocol ModelProtocol {
  func decodeModel(dict: [Swift.String : Any]) -> Self?
}
open class BaseModel : YZSDK.ModelProtocol {
  required public init()
  open func decodeModel(dict: [Swift.String : Any]) -> Self?
  @objc deinit
}
public enum ResponseKit<T> {
  case success(T)
  case error(error: Any)
}
public let baseUrl: Swift.String
@_hasMissingDesignatedInitializers public class NetworkRequest {
  public static let shared: YZSDK.NetworkRequest
  public func requestJson(path: YZSDK.ApiPath, baseUrl: Swift.String = baseUrl, method: Alamofire.HTTPMethod = .post, params: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, isNeedSign: Swift.Bool = false, encoding: any Alamofire.ParameterEncoding = JSONEncoding.default, completed: ((YZSDK.ResponseKit<[Swift.String : Any]>) -> Swift.Void)?)
  public func request<T>(path: YZSDK.ApiPath, baseUrl: Swift.String = baseUrl, method: Alamofire.HTTPMethod = .post, params: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, isNeedSign: Swift.Bool = false, encoding: any Alamofire.ParameterEncoding = JSONEncoding.default, completed: ((YZSDK.ResponseKit<T>) -> Swift.Void)?) where T : YZSDK.BaseModel
  public func upload(url: Swift.String, data: Foundation.Data, complete: @escaping ((YZSDK.ResponseKit<Swift.Bool>) -> ()))
  @objc deinit
}
public func downloadFolder() -> Foundation.URL
public enum ApiPath : Swift.String {
  case guestLogin
  case serverTime
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension YZSDK.ApiPath : Swift.Equatable {}
extension YZSDK.ApiPath : Swift.Hashable {}
extension YZSDK.ApiPath : Swift.RawRepresentable {}
